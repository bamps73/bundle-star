#!/usr/bin/env ruby

require "rubygems"
require "netrc"
require "io/console"
require "fileutils"
require "octokit"

GITHUB_HOST = "api.github.com".freeze
netrc = Netrc.read
github_account = netrc[GITHUB_HOST]
unless github_account
  src_path = Netrc.default_path
  puts "Not found your GitHub ID/Token. Please input your GitHub ID and Token if you ok, bundle-star will save these information to netrc file: "

  puts "Input GitHub ID"
  github_id = STDIN.gets.chomp
  puts "Input GitHub Token"
  github_token = STDIN.noecho(&:gets).chomp

  if netrc.length > 0
    dest_path = "#{Netrc.default_path}.backup_by_bundlestar"
    FileUtils.cp src_path, dest_path
    puts "Your original netrc file is copied to #{dest_path}"
  end

  netrc[GITHUB_HOST] = github_id, github_token
  netrc.save
  puts "Saved to #{src_path}"
end

module Bundler
  class Star
    attr_reader :installer

    def initialize(installer)
      @installer = installer
    end

    def star
      if repo = repository
        begin
          client = Octokit::Client.new netrc: true
          client.star repo
          message = "\e[33m"
          message << (macos_higher_lion? ? "\xe2\xad\x90  " : "\xe2\x98\x85  ")
          puts message + "starred #{repo} (^_^)b\e[0m"
        rescue => e
          puts "\e[31mfailed putting a star #{repo}, reason #{e}\e[0m"
          puts e.backtrace if ENV['DEBUG']
        end
      end
    end

  private

    def repository
      url = installer.spec.homepage
      url.sub!(/\/$/, '') if url # some gems contain trailing slash
      if url =~ /\Ahttps?:\/\/([^.]+)?\.?github.com\/(.+)/
        if $1 == nil
          $2
        elsif $1 == 'www'
          $2
        else
          "#{$1}/#{$2}"
        end
      end
    end

    def macos_higher_lion?
      unless RUBY_PLATFORM =~ /darwin/
        return false
      end
      macos_version = `/usr/bin/sw_vers -productVersion`.chomp.slice(/\d+\.\d+/).to_f
      macos_version >= 10.7
    end
  end
end

Gem.post_install do |installer|
  Bundler::Star.new(installer).star
end

load(Gem.bin_path("bundler", "bundle"))
